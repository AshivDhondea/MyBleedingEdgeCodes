% PjMolniya03NominalTrajectory.m generates a nominal trajectory which is
% close to the one created by PjMolniya01GenerateData.m

%% Dependencies
% Based on Code01NumIntegTwoBodyGNF.m

% Calls fnGlobePlot.m, fnRK4vector.m and fnKepler3Augmented.m

% Requires data 'ActualEphemeris.mat' which is produced by
% PjMolniya01GenerateData.m

% Saves data in 'NominalTrajectory.mat' for processing by the subsequent
% project files.

%% Author
% Ashiv Dhondea, RRSG, UCT.
% Date: 11 October 2015

%% References

% 1. Tracking Filter Engineering. Norman Morrison
% 2. Statistical Orbit Determination. Tapley, Schutz, Born.

%% Clear memory
clear
clc
% close all;

%% Declare constants
mu = 398600;     % Earthâ€™s gravitational parameter [km^3/s^2]
R_earth = 6378;  % Earth radius [km]

%% Declare variables
% Load ephemeris generated by PjMolniya01GenerateData.m
load('ActualEphemeris.mat') % Contains timevector t and X

%% Nominal trajectory
deltaX0 = [1e-6;-1e-6;1e-6;-1e-6;1e-6;-1e-6]; % I chose this at random

% The perturbation vector has very small elements, which means that the
% nominal trajectory is very close to the actual one.

% Perturb the initial conditions
Xnominal = X(:,1) + deltaX0; % Initialize the nominal trajectory

% Generate nominal trajectory and state transition matrices
% propagated state vectors stored in X
% First 6 elements: x,y,z,xdot,ydot,zdot
% % Last 36 elements: state transition matrix
Xnom = zeros(6+36,size(X,2));
Phi0 = eye(6); % Initially state transition matrix is identity matrix
Xnom(:,1) = [Xnominal;reshape(Phi0,36,1)]; 

clear X

Xnom  = fnRK4vector(@fnKepler3Augmented,t,Xnom);

%% Plotting
fnGlobePlot( Xnom, R_earth, -20,5,1.5);
zoom(0.75)

%% Store data
data = 'NominalTrajectory.mat';
save(data,'Xnom','deltaX0');

%% End
% The data generated in this file is analysed in the next projects.
